/*
 * DebuggerJFrame.java
 *
 * Created on June 29, 2008, 5:15 AM
 */
package ffdYKJisu.nes_emu.debugger;


import java.io.File;

import ffdYKJisu.nes_emu.domain.uByte;
import ffdYKJisu.nes_emu.domain.uShort;
import ffdYKJisu.nes_emu.system.NES;

/**
 *
 * @author  Administrator
 */
public class DebuggerJFrame extends javax.swing.JFrame {

	NES nes;
	int stepMultiplier = 1;

	/** Creates new form DebuggerJFrame */
	public DebuggerJFrame() {
		initComponents();
	}

	private String getNextInstructionsString(uShort address, int len) {
		//System.out.println("init address and len" + address + "," + len);
		// Set next instructions text area
		StringBuffer sb = new StringBuffer();
		for (int i = 0; i < len; i++) {
			// Increment instruction position
			try {
				int instructionLength = this.nes.getCpu().instructionLength(address);
				sb.append(this.nes.getCpu().instructionToString(address));
				address = address.increment(instructionLength);
			//System.out.println("addr" + address + " ilen " + instructionLength);
			} catch (Exception e) {
				sb.append(address + ": ");
				sb.append(this.nes.getCpu().memory.read(address).toString());
				address = address.increment();
			}
			// Append instruction there to string buffer
			if (i < len - 1)
				sb.append("\n");
		}
		return sb.toString();
	}

	private void updateState() {
		// Set next instruction to be run field
		uShort curPC = this.nes.getCpu().getPC();
		this.jTextFieldNextInstruction.setText(
			this.nes.getCpu().instructionToString(curPC));
		// Set next instructions text area
		int numLines = this.jTextAreaNextInstructions.getHeight() /
			this.jTextAreaNextInstructions.getFontMetrics(
			this.jTextAreaNextInstructions.getFont()).getHeight();
		// Write to next instrcutions text area
		this.jTextAreaNextInstructions.setText(
			this.getNextInstructionsString(curPC.increment(this.nes.getCpu().instructionLength(curPC)), numLines));
		// Set PC field
		this.jTextFieldPC.setText(
			this.nes.getCpu().getPC().toString().replaceAll("^\\$", ""));
		// Set flag status
		this.jCheckBoxBreak.setSelected(this.nes.getCpu().getP().isSetBreak());
		this.jCheckBoxCarry.setSelected(this.nes.getCpu().getP().isSetCarry());
		this.jCheckBoxDecimal.setSelected(this.nes.getCpu().getP().isSetDecimal());
		this.jCheckBoxInterruptDisable.setSelected(
			this.nes.getCpu().getP().isSetInterruptDisable());
		this.jCheckBoxOverflow.setSelected(
			this.nes.getCpu().getP().isSetOverflow());
		this.jCheckBoxNegative.setSelected(
			this.nes.getCpu().getP().isSetNegative());
		this.jCheckBoxZero.setSelected(this.nes.getCpu().getP().isSetZero());
		// Set Registers
		this.jTextFieldA.setText(this.nes.getCpu().getA().toString().replaceAll("^\\$", ""));
		this.jTextFieldX.setText(this.nes.getCpu().getX().toString().replaceAll("^\\$", ""));
		this.jTextFieldY.setText(this.nes.getCpu().getY().toString().replaceAll("^\\$", ""));
		// And Stack pointer
		this.jTextFieldSP.setText(this.nes.getCpu().getSP().toString().replaceAll("^\\$", ""));
	}

	private void runStep() {
		// Write instruction to instruction history
		uShort curPC = this.nes.getCpu().getPC();
		this.jTextAreaHistory.append(
			this.nes.getCpu().instructionToString(curPC) + "\n");
		// Run for one step
		this.nes.getCpu().runStep();
		//Update rest of cpu state
		this.updateState();
	}

	/** This method is called from within the constructor to
	 * initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is
	 * always regenerated by the Form Editor.
	 */
	@SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jLabelCurrentPosition = new javax.swing.JLabel();
        jSeparatorCurrentPosition = new javax.swing.JSeparator();
        jTextFieldNextInstruction = new javax.swing.JTextField();
        jScrollPaneNext = new javax.swing.JScrollPane();
        jTextAreaNextInstructions = new javax.swing.JTextArea();
        jLabelProcessorStatus = new javax.swing.JLabel();
        jCheckBoxNegative = new javax.swing.JCheckBox();
        jCheckBoxOverflow = new javax.swing.JCheckBox();
        jCheckBoxBreak = new javax.swing.JCheckBox();
        jCheckBoxDecimal = new javax.swing.JCheckBox();
        jCheckBoxInterruptDisable = new javax.swing.JCheckBox();
        jCheckBoxZero = new javax.swing.JCheckBox();
        jCheckBoxCarry = new javax.swing.JCheckBox();
        jLabelPC = new javax.swing.JLabel();
        jTextFieldPC = new javax.swing.JTextField();
        jButtonStep = new javax.swing.JButton();
        jLabelA = new javax.swing.JLabel();
        jTextFieldA = new javax.swing.JTextField();
        jLabelX = new javax.swing.JLabel();
        jTextFieldX = new javax.swing.JTextField();
        jLabelY = new javax.swing.JLabel();
        jTextFieldY = new javax.swing.JTextField();
        jLabelOpHistory = new javax.swing.JLabel();
        jButtonClearHistory = new javax.swing.JButton();
        jSeparatorOpHistory = new javax.swing.JSeparator();
        jScrollPaneHistory = new javax.swing.JScrollPane();
        jTextAreaHistory = new javax.swing.JTextArea();
        jLabelSP = new javax.swing.JLabel();
        jTextFieldSP = new javax.swing.JTextField();
        jLabelStepMultiplier = new javax.swing.JLabel();
        jTextFieldStepMultiplier = new javax.swing.JTextField();

        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jScrollPane1.setViewportView(jTextArea1);

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("NES Debugger");
        setFont(new java.awt.Font("Monospaced", 0, 13));
        setForeground(java.awt.Color.white);

        jLabelCurrentPosition.setText("Current Position");

        jTextFieldNextInstruction.setEditable(false);
        jTextFieldNextInstruction.setFont(new java.awt.Font("Courier New", 1, 12));
        jTextFieldNextInstruction.setText("jTextField1");

        jTextAreaNextInstructions.setColumns(20);
        jTextAreaNextInstructions.setEditable(false);
        jTextAreaNextInstructions.setFont(new java.awt.Font("Courier New", 0, 12)); // NOI18N
        jTextAreaNextInstructions.setRows(5);
        jScrollPaneNext.setViewportView(jTextAreaNextInstructions);

        jLabelProcessorStatus.setText("P:");

        jCheckBoxNegative.setText("N");
        jCheckBoxNegative.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBoxNegativeActionPerformed(evt);
            }
        });

        jCheckBoxOverflow.setText("V");
        jCheckBoxOverflow.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBoxOverflowActionPerformed(evt);
            }
        });

        jCheckBoxBreak.setText("B");

        jCheckBoxDecimal.setText("D");

        jCheckBoxInterruptDisable.setText("I");

        jCheckBoxZero.setText("Z");
        jCheckBoxZero.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBoxZeroActionPerformed(evt);
            }
        });

        jCheckBoxCarry.setText("C");

        jLabelPC.setText("PC:");

        jTextFieldPC.setFont(new java.awt.Font("Courier New", 0, 12));
        jTextFieldPC.setText("????");
        jTextFieldPC.setAutoscrolls(false);
        jTextFieldPC.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jTextFieldPCKeyReleased(evt);
            }
        });

        jButtonStep.setText("Step");
        jButtonStep.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonStepActionPerformed(evt);
            }
        });

        jLabelA.setText("A:");

        jTextFieldA.setFont(jTextFieldPC.getFont());
        jTextFieldA.setText("??");
        jTextFieldA.setAutoscrolls(false);
        jTextFieldA.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jTextFieldAKeyReleased(evt);
            }
        });

        jLabelX.setText("X:");

        jTextFieldX.setFont(jTextFieldPC.getFont());
        jTextFieldX.setText("??");
        jTextFieldX.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jTextFieldXKeyReleased(evt);
            }
        });

        jLabelY.setText("Y:");

        jTextFieldY.setFont(jTextFieldPC.getFont());
        jTextFieldY.setText("??");
        jTextFieldY.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jTextFieldYKeyReleased(evt);
            }
        });

        jLabelOpHistory.setText("Operation History");

        jButtonClearHistory.setText("Clear");
        jButtonClearHistory.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonClearHistoryActionPerformed(evt);
            }
        });

        jScrollPaneHistory.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jScrollPaneHistory.setFont(new java.awt.Font("Monospaced", 0, 13));

        jTextAreaHistory.setColumns(20);
        jTextAreaHistory.setEditable(false);
        jTextAreaHistory.setFont(jTextAreaNextInstructions.getFont());
        jTextAreaHistory.setRows(5);
        jScrollPaneHistory.setViewportView(jTextAreaHistory);

        jLabelSP.setText("SP:");

        jTextFieldSP.setFont(jTextFieldPC.getFont());
        jTextFieldSP.setText("??");
        jTextFieldSP.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jTextFieldSPKeyReleased(evt);
            }
        });

        jLabelStepMultiplier.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabelStepMultiplier.setText("\u00D7");

        jTextFieldStepMultiplier.setColumns(2);
        jTextFieldStepMultiplier.setFont(jTextFieldPC.getFont());
        jTextFieldStepMultiplier.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        jTextFieldStepMultiplier.setText("1");
        jTextFieldStepMultiplier.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jTextFieldStepMultiplierKeyReleased(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPaneNext, javax.swing.GroupLayout.DEFAULT_SIZE, 262, Short.MAX_VALUE)
                    .addComponent(jLabelCurrentPosition)
                    .addComponent(jSeparatorCurrentPosition, javax.swing.GroupLayout.DEFAULT_SIZE, 262, Short.MAX_VALUE)
                    .addComponent(jTextFieldNextInstruction, javax.swing.GroupLayout.DEFAULT_SIZE, 262, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPaneHistory, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 231, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabelOpHistory)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 87, Short.MAX_VALUE)
                        .addComponent(jButtonClearHistory))
                    .addComponent(jSeparatorOpHistory, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 231, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabelPC)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jTextFieldPC, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButtonStep)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabelStepMultiplier)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jTextFieldStepMultiplier, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabelProcessorStatus)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jCheckBoxNegative)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jCheckBoxOverflow)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jCheckBoxBreak)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jCheckBoxDecimal)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jCheckBoxInterruptDisable)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jCheckBoxZero)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jCheckBoxCarry))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabelA)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jTextFieldA, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabelX)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jTextFieldX, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabelY)
                        .addGap(4, 4, 4)
                        .addComponent(jTextFieldY, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jLabelSP)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jTextFieldSP, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );

        layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {jLabelX, jLabelY, jTextFieldA, jTextFieldX, jTextFieldY});

        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jCheckBoxInterruptDisable)
                            .addComponent(jCheckBoxZero)
                            .addComponent(jCheckBoxCarry)
                            .addComponent(jCheckBoxDecimal)
                            .addComponent(jCheckBoxBreak)
                            .addComponent(jCheckBoxOverflow)
                            .addComponent(jCheckBoxNegative)
                            .addComponent(jLabelProcessorStatus))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabelPC)
                            .addComponent(jTextFieldPC, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jButtonStep)
                            .addComponent(jLabelStepMultiplier)
                            .addComponent(jTextFieldStepMultiplier, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabelA)
                            .addComponent(jTextFieldA, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabelX)
                            .addComponent(jTextFieldX, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabelY)
                            .addComponent(jTextFieldY, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabelSP)
                            .addComponent(jTextFieldSP, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabelOpHistory)
                            .addComponent(jButtonClearHistory))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jSeparatorOpHistory, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPaneHistory, javax.swing.GroupLayout.DEFAULT_SIZE, 178, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabelCurrentPosition)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jSeparatorCurrentPosition, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jTextFieldNextInstruction, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPaneNext, javax.swing.GroupLayout.DEFAULT_SIZE, 248, Short.MAX_VALUE)))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

private void jCheckBoxNegativeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBoxNegativeActionPerformed
	boolean b = this.jCheckBoxNegative.isSelected();
	System.out.println("Negative flag is now " + b);
	this.nes.getCpu().getP().setNegative(b);
}//GEN-LAST:event_jCheckBoxNegativeActionPerformed

private void jButtonStepActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonStepActionPerformed
	// do one step+update for as many times as indicated by the step multiplier
	for (int i = 0; i < this.stepMultiplier; i++) {
		this.runStep();
	}
}//GEN-LAST:event_jButtonStepActionPerformed

private void jCheckBoxZeroActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBoxZeroActionPerformed
	boolean b = this.jCheckBoxZero.isSelected();
	System.out.println("Zero flag is now " + b);
	this.nes.getCpu().getP().setZero(b);
}//GEN-LAST:event_jCheckBoxZeroActionPerformed

private void jCheckBoxOverflowActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBoxOverflowActionPerformed
	boolean b = this.jCheckBoxOverflow.isSelected();
	System.out.println("Overflow flag is now " + b);
	this.nes.getCpu().getP().setOverflow(b);
}//GEN-LAST:event_jCheckBoxOverflowActionPerformed

private void jButtonClearHistoryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonClearHistoryActionPerformed
	this.jTextAreaHistory.setText("");
}//GEN-LAST:event_jButtonClearHistoryActionPerformed

private void jTextFieldAKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextFieldAKeyReleased
	String valueString = this.jTextFieldA.getText();
	if (valueString.matches("^[0-9A-Fa-f]{2}$")) {
		int temp = Integer.decode("0x" + valueString);
		this.nes.getCpu().setA(new uByte(temp));
		System.out.println("Setting A to " + valueString + ", A is now " + this.nes.getCpu().getA());
	}
}//GEN-LAST:event_jTextFieldAKeyReleased

private void jTextFieldPCKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextFieldPCKeyReleased
	String pcEntered = this.jTextFieldPC.getText();
	if (pcEntered.matches("^[0-9A-Fa-f]{4}$")) {
		int temp = Integer.decode("0x" + pcEntered);
		uShort curPC = this.nes.getCpu().getPC();
		uShort newPC = new uShort(temp);
		if (!curPC.equals(newPC)) {
			this.nes.getCpu().setPC(newPC);
			this.updateState();
			System.out.println("Setting PC to " + pcEntered +
				", new PC is " + this.nes.getCpu().getPC());
		}
	}
}//GEN-LAST:event_jTextFieldPCKeyReleased

private void jTextFieldXKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextFieldXKeyReleased
	String valueString = this.jTextFieldX.getText();
	if (valueString.matches("^[0-9A-Fa-f]{2}$")) {
		this.nes.getCpu().setX(new uByte(Integer.decode("0x" + valueString)));
		System.out.println("Setting X to " + valueString + ", X is now " + this.nes.getCpu().getX());
	}
}//GEN-LAST:event_jTextFieldXKeyReleased

private void jTextFieldYKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextFieldYKeyReleased
	String valueString = this.jTextFieldY.getText();
	if (valueString.matches("^[0-9A-Fa-f]{2}$")) {
		this.nes.getCpu().setY(new uByte(Integer.decode("0x" + valueString)));
		System.out.println("Setting Y to " + valueString + ", Y is now " + this.nes.getCpu().getY());
	}
}//GEN-LAST:event_jTextFieldYKeyReleased

private void jTextFieldSPKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextFieldSPKeyReleased
	String valueString = this.jTextFieldSP.getText();
	if (valueString.matches("^[0-9A-Fa-f]{2}$")) {
		this.nes.getCpu().setSP(new uByte(Integer.decode("0x" + valueString)));
		System.out.println("Setting SP to " + valueString + ", SP is now " + this.nes.getCpu().getSP());
	}
}//GEN-LAST:event_jTextFieldSPKeyReleased

private void jTextFieldStepMultiplierKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextFieldStepMultiplierKeyReleased
	String valueString = this.jTextFieldStepMultiplier.getText();
	if (valueString.matches("^[0-9]{1,2}$")) {
		this.stepMultiplier = Integer.decode(valueString);
		System.out.println("Setting step mult. to " + this.stepMultiplier);
	}
}//GEN-LAST:event_jTextFieldStepMultiplierKeyReleased

	/**
	 * @param args the command line arguments
	 */
	public static void main(String args[]) {
		java.awt.EventQueue.invokeLater(new Runnable() {

			public void run() {
				DebuggerJFrame j = new DebuggerJFrame();
				j.setVisible(true);
				String romName = "Pac-Man (U) [!].nes";
				File cart = new File(romName);
				j.nes = new NES();
				j.nes.loadRom(cart);
				j.nes.initialize();
				j.updateState();
			}
		});
	}    // <editor-fold defaultstate="collapsed" desc="Generated Variables">
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonClearHistory;
    private javax.swing.JButton jButtonStep;
    private javax.swing.JCheckBox jCheckBoxBreak;
    private javax.swing.JCheckBox jCheckBoxCarry;
    private javax.swing.JCheckBox jCheckBoxDecimal;
    private javax.swing.JCheckBox jCheckBoxInterruptDisable;
    private javax.swing.JCheckBox jCheckBoxNegative;
    private javax.swing.JCheckBox jCheckBoxOverflow;
    private javax.swing.JCheckBox jCheckBoxZero;
    private javax.swing.JLabel jLabelA;
    private javax.swing.JLabel jLabelCurrentPosition;
    private javax.swing.JLabel jLabelOpHistory;
    private javax.swing.JLabel jLabelPC;
    private javax.swing.JLabel jLabelProcessorStatus;
    private javax.swing.JLabel jLabelSP;
    private javax.swing.JLabel jLabelStepMultiplier;
    private javax.swing.JLabel jLabelX;
    private javax.swing.JLabel jLabelY;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPaneHistory;
    private javax.swing.JScrollPane jScrollPaneNext;
    private javax.swing.JSeparator jSeparatorCurrentPosition;
    private javax.swing.JSeparator jSeparatorOpHistory;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JTextArea jTextAreaHistory;
    private javax.swing.JTextArea jTextAreaNextInstructions;
    private javax.swing.JTextField jTextFieldA;
    private javax.swing.JTextField jTextFieldNextInstruction;
    private javax.swing.JTextField jTextFieldPC;
    private javax.swing.JTextField jTextFieldSP;
    private javax.swing.JTextField jTextFieldStepMultiplier;
    private javax.swing.JTextField jTextFieldX;
    private javax.swing.JTextField jTextFieldY;
    // End of variables declaration//GEN-END:variables
// </editor-fold>
}
